name: Azure Friday Full CI CD

on: [push]
  # pull_request:
  #   branches:
  #     - main

env:
  # basic  
  resourceGroup: azurefriday
  location: eastus
  subName: "ca-jessde-demo-test"

  # app specific
  acrName: azurefriday21
  dash_name: dash

  # vnet
  vnet_name: acivnet
  vnet_prefix: 192.168.0.0/16

  #sql
  sql_server_name: sqlserver-gfq3snhzfq
  sql_db_name: mydb
  sql_subnet_name: sql
  sql_subnet_prefix: 192.168.3.0/24

  # storage
  storage_account_name: acilabgfq3snhzfq

  # appgw
  appgw_name: appgw
  appgw_subnet_name: appgw
  appgw_subnet_prefix: 192.168.1.0/24
  appgw_pip_name: appgw-pip
  appgw_pip_dns: appgw-jldhd

  # aci
  aci_name: jdaci
  aci_subnet_name: aci
  aci_subnet_prefix: 192.168.2.0/24

jobs:
  deployInfra:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
    # checkout branch
    - name: git checkout main branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # create resourceGroup
    - name: "Create Resource Group and Network vnet"
      run: |
        az group create \
        --subscription "$subName" \
        --name $resourceGroup \
        --location $location > /dev/null && echo "Resource Group Created."

        vnetCheck=$(az network vnet list -g $resourceGroup -o tsv --query '[0].name')

        if [[  $vnetCheck  ]]; then
          echo 'Virtual Network already exists'
        else
          echo 'Virtual network does not exist. Creating virtual network now.'
          # create vnet
          az network vnet create \
            -n $vnet_name \
            -g $resourceGroup \
            --address-prefix $vnet_prefix > /dev/null && echo "vnet created."

          az network vnet subnet create \
            --vnet-name $vnet_name \
            -g $resourceGroup \
            -n $appgw_subnet_name \
            --address-prefix $appgw_subnet_prefix > /dev/null && echo "vnet subnet created for appgw."

          az network vnet subnet create \
            --vnet-name $vnet_name \
            -g $resourceGroup \
            -n $aci_subnet_name \
            --address-prefix $aci_subnet_prefix > /dev/null && echo "vnet subnet created for aci."

          az network vnet subnet create \
            --vnet-name $vnet_name \
            -g $resourceGroup \
            -n $sql_subnet_name \
            --address-prefix $sql_subnet_prefix > /dev/null && echo "vnet subnet created for sql."
        fi

    # create azure container registry
    - name: "Create Azure Container Registry"
      run: |
        az acr create \
          --resource-group $resourceGroup \
          --name $acrName \
          --sku Premium \
          --subscription "$subName" \
          --admin-enabled true
    
    # create database
    - name: "Create SQL Database"
      run: |
        az sql server create \
          -n $sql_server_name \
          -g $resourceGroup \
          -l $location \
          --admin-user ${{ SECRETS.SQL_USER }} --admin-password ${{ SECRETS.SQL_PASSWORD}}

        echo "sql_server_fqdn=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query fullyQualifiedDomainName)" >> $GITHUB_ENV
        
        az sql db create \
          -n $sql_db_name \
          -s $sql_server_name \
          -g $resourceGroup \
          -e Basic -c 5 --no-wait
    
    # create SQL server private endpoint
    - name: "Create SQL Server private endpoint"
      run: |
        sql_endpoint_name=sqlep

        sql_server_id=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query id)
        echo "sql_server_id=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query id)" >> $GITHUB_ENV
        
        az network vnet subnet update \
          -n $sql_subnet_name \
          -g $resourceGroup \
          --vnet-name $vnet_name \
          --disable-private-endpoint-network-policies true
        
        az network private-endpoint create \
          -n $sql_endpoint_name \
          -g $resourceGroup \
          --vnet-name $vnet_name \
          --subnet $sql_subnet_name \
          --private-connection-resource-id $sql_server_id \
          --group-id sqlServer \
          --connection-name sqlConnection
        
        sql_nic_id=$(az network private-endpoint show -n $sql_endpoint_name -g $resourceGroup --query 'networkInterfaces[0].id' -o tsv)

        echo "sql_endpoint_name=sqlep" >> $GITHUB_ENV
        echo "sql_nic_id=$(az network private-endpoint show -n $sql_endpoint_name -g $resourceGroup --query 'networkInterfaces[0].id' -o tsv)" >> $GITHUB_ENV
        echo "sql_endpoint_ip=$(az network nic show --ids $sql_nic_id --query 'ipConfigurations[0].privateIpAddress' -o tsv)" >> $GITHUB_ENV
  

    - name: "Create Azure Private DNS Zones for private link"
      run: |
        plink_dns_zone_name=jessicadeen.database.windows.net

        plink_dns_check=$(az network private-dns zone list -g $resourceGroup -o tsv --query '[0].name')

        echo "Your sql endpoint IP is: $sql_endpoint_ip"

        if [[  $plink_dns_check  ]]; then
          echo "Azure DNS Zone for Private Link Already Exists."
        else
          az network private-dns zone create \
          -n $plink_dns_zone_name \
          -g $resourceGroup 

          az network private-dns link vnet create \
            -g $resourceGroup \
            -z $plink_dns_zone_name \
            -n privatelink \
            --virtual-network $vnet_name \
            --registration-enabled false

          az network private-dns record-set a create \
            -n $sql_server_name \
            -z $plink_dns_zone_name \
            -g $resourceGroup

          az network private-dns record-set a add-record \
            --record-set-name $sql_server_name \
            -z $plink_dns_zone_name \
            -g $resourceGroup \
            -a $sql_endpoint_ip

          dns_zone_name=jessicadeen.com

          az network private-dns zone create \
            -n $dns_zone_name \
            -g $resourceGroup 

          az network private-dns link vnet create \
            -g $resourceGroup \
            -z $dns_zone_name \
            -n jessicadeen \
            --virtual-network $vnet_name \
            --registration-enabled false
        fi

    - name: "Create Network Profile"
      run: |
        az container create \
          -n dummy \
          -g $resourceGroup \
          --image alpine:latest \
          --ip-address private \
          --ports 80 \
          --vnet $vnet_id \
          --command-line "tail -f /dev/null" \
          --subnet $subnet_id

        # If the previous command fails with an error, it is no problem, as long as a network profile is created (see below)

        az container delete \
          -n dummy \
          -g $resourceGroup -y

        nw_profile_id=$(az network profile list -g $resourceGroup --query '[0].id' -o tsv)
        echo "nw_profile_id=$(az network profile list -g $resourceGroup --query '[0].id' -o tsv)" >> $GITHUB_ENV

        if [[ -z "$nw_profile_id" ]]
        then
            echo "No network profile could be created!!"
        fi
        
  build:
    name: Build / Push to ACR
    runs-on: ubuntu-latest
    needs: deployInfra
    steps:
    # checkout branch
    - name: git checkout main branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: "Get ACR Container Information"
      run: |
        echo "Retrieving Container Registry info..."
        acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
        CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
        # acr/container registry variables
        echo "CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)" >> $GITHUB_ENV
        echo "REGISTRY_USERNAME=$(az acr credential show -n $acrName --query username -o tsv)" >> $GITHUB_ENV
        echo "REGISTRY_PASSWORD=$(az acr credential show -n $acrName -o tsv --query passwords[0].value)" >> $GITHUB_ENV
    
    - name: "docker login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: "build api container"
      run: docker build ./api -t $CONTAINER_REGISTRY/azurefriday/api:$GITHUB_SHA

    - name: "build dash container"
      run: docker build ./dash -t $CONTAINER_REGISTRY/azurefriday/dash:$GITHUB_SHA
    
    # - name: Scan API Container
    #   uses: azure/container-scan@v0
    #   with:
    #     image-name: $CONTAINER_REGISTRY/azurefriday/api:$GITHUB_SHA
    
    # - name: Scan Dashboard Container
    #   uses: azure/container-scan@v0
    #   with:
    #     image-name: $CONTAINER_REGISTRY/azurefriday/dash:$GITHUB_SHA

    - name: "push api"
      run: docker push $CONTAINER_REGISTRY/azurefriday/api:$GITHUB_SHA

    - name: "push dashboard"
      run: docker push $CONTAINER_REGISTRY/azurefriday/dash:$GITHUB_SHA

  deployStaging:
    name: (Staging) Deploy Azure Container Instances
    runs-on: ubuntu-latest
    needs: build
    steps:
      # checkout branch
      - name: git checkout main branch
        uses: actions/checkout@v2

      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Get ACR Container Information"
        run: |
          echo "Retrieving Container Registry info..."
          acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
          CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
          # acr/container registry variables
          echo "CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)" >> $GITHUB_ENV
          echo "REGISTRY_USERNAME=$(az acr credential show -n $acrName --query username -o tsv)" >> $GITHUB_ENV
          echo "REGISTRY_PASSWORD=$(az acr credential show -n $acrName -o tsv --query passwords[0].value)" >> $GITHUB_ENV

      - name: "Generate Azure CLI Deployment Yaml"
        run: |
          storageKey=$(az storage account keys list --resource-group $resourceGroup --account-name $storage_account_name --query "[0].value" --output tsv)

          nw_profile_id=$(az network profile list -g $resourceGroup --query '[0].id' -o tsv)

          sql_server_fqdn=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query fullyQualifiedDomainName)

          echo "sql_server_fqdn=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query fullyQualifiedDomainName)" >> $GITHUB_ENV
                      
          echo "Generating deployment.yaml..."

          sed -i "s|<ACI_NAME>|$aci_name-dev|g" IaC/dev.yaml && echo "aci name added"

          sed -i "s|<DOCKER_REGISTRY_URL>|$CONTAINER_REGISTRY|g" IaC/dev.yaml && echo "registry url added"

          sed -i "s|<DOCKER_REGISTRY_USERNAME>|$REGISTRY_USERNAME|g" IaC/dev.yaml && echo "registry username added"

          sed -i "s|<DOCKER_REGISTRY_PASSWORD>|$REGISTRY_PASSWORD|g" IaC/dev.yaml && echo "registry password added"   

          sed -i "s|<NETWORK_PROFILE_ID>|$nw_profile_id|g" IaC/dev.yaml && echo "Network Profile ID added"     

          sed -i "s|<SQL_SERVER_FQDN>|$sql_server_fqdn|g" IaC/dev.yaml && echo "sql server fqdn added"

          sed -i "s|<SQL_SERVER_USERNAME>|${{ SECRETS.SQL_USER }}|g" IaC/dev.yaml && echo "sql username added"

          sed -i "s|<SQL_SERVER_PASSWORD>|${{ SECRETS.SQL_PASSWORD }}|g" IaC/dev.yaml && echo "sql server password added"

          sed -i "s|<GIT_SHA>|$GITHUB_SHA|g" IaC/dev.yaml && echo "github sha added"
      
      - name: "Deploy Observability Dashboard"
        run: |
          vnet_id=$(az network vnet show -n $vnet_name -g $resourceGroup --query id -o tsv)
          subnet_id=$(az network vnet subnet show -n $aci_subnet_name --vnet-name $vnet_name -g $resourceGroup --query id -o tsv)
          
          az container create \
            -n $dash_name \
            -g $resourceGroup \
            --image $CONTAINER_REGISTRY/azurefriday/dash:$GITHUB_SHA \
            --vnet $vnet_id \
            --subnet $subnet_id \
            --ip-address private \
            --ports 8050  \
            -e "SQL_SERVER_FQDN=$sql_server_fqdn" \
            "SQL_SERVER_USERNAME=${{ SECRETS.SQL_USER }}" \
            "SQL_SERVER_PASSWORD=${{ SECRETS.SQL_PASSWORD }}" \
            "SQL_SERVER_DB=${sql_db_name}" \
            --registry-login-server $CONTAINER_REGISTRY \
            --registry-username $REGISTRY_USERNAME \
            --registry-password $REGISTRY_PASSWORD

            echo "dash_ip=$(az container show -n $dash_name -g $resourceGroup --query 'ipAddress.ip' -o tsv)" >> $GITHUB_ENV

      - name: "Create Application Gateway"
        run: |
          allocation_method=Static

          az network public-ip create \
            -g $resourceGroup \
            -n $appgw_pip_name \
            --sku Standard \
            --allocation-method $allocation_method \
            --dns-name $appgw_pip_dns

          appgw_fqdn=$(az network public-ip show -g $resourceGroup -n $appgw_pip_name --query dnsSettings.fqdn -o tsv)

          az network application-gateway create \
            -g $resourceGroup \
            -n $appgw_name \
            --min-capacity 1 \
            --max-capacity 2 \
            --sku Standard_v2 \
            --frontend-port 8050 \
            --routing-rule-type basic \
            --http-settings-port 8050 \
            --http-settings-protocol Http \
            --public-ip-address $appgw_pip_name \
            --vnet-name $vnet_name \
            --subnet $appgw_subnet_name \
            --servers "$dash_ip"
      
      - name: "ACI API and Web Group Deploy"
        run: az container create -g $resourceGroup --file IaC/dev.yaml --no-wait

      - name: "Update Application Gateay"
        run: |
          
          az network application-gateway address-pool create \
            -n acidevpool \
            -g $resourceGroup \
            --gateway-name $appgw_name \
            --servers ${aci_name_prefix}-dev-01.contoso.com ${aci_name_prefix}-dev-02.contoso.com ${aci_name_prefix}-dev-03.contoso.com
          
          az network application-gateway frontend-port create \
            -n acidevfrontendport \
            -g $resourceGroup \
            --gateway-name $appgw_name \
            --port 8443
          
          az network application-gateway http-listener create \
            -n acidevlistener \
            -g $resourceGroup \
            --gateway-name $appgw_name \
            --frontend-port acidevfrontendport \
            --frontend-ip $frontend_name \
          
          az network application-gateway rule create \
            -g $resourceGroup \
            --gateway-name $appgw_name \
            -n acidevrule \
            --http-listener acidevlistener \
            --rule-type Basic \
            --address-pool acidevpool \
            --http-settings acisettings

  deployProd:
    name: (Prod) Deploy Azure Container Instances
    runs-on: ubuntu-latest
    needs: deployStaging
    steps:
      # checkout branch
      - name: git checkout main branch
        uses: actions/checkout@v2

      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Get ACR Container Information"
        run: |
          echo "Retrieving Container Registry info..."
          acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
          CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
          # acr/container registry variables
          echo "CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)" >> $GITHUB_ENV
          echo "REGISTRY_USERNAME=$(az acr credential show -n $acrName --query username -o tsv)" >> $GITHUB_ENV
          echo "REGISTRY_PASSWORD=$(az acr credential show -n $acrName -o tsv --query passwords[0].value)" >> $GITHUB_ENV

      - name: "Generate Azure CLI Deployment Yaml"
        run: |
          storageKey=$(az storage account keys list --resource-group $resourceGroup --account-name $storage_account_name --query "[0].value" --output tsv)

          nw_profile_id=$(az network profile list -g $resourceGroup --query '[0].id' -o tsv)

          sql_server_fqdn=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query fullyQualifiedDomainName)

          echo "sql_server_fqdn=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query fullyQualifiedDomainName)" >> $GITHUB_ENV
                      
          echo "Generating deployment.yaml..."

          sed -i "s|<ACI_NAME>|$aci_name-prod|g" IaC/dev.yaml && echo "aci name added"

          sed -i "s|<DOCKER_REGISTRY_URL>|$CONTAINER_REGISTRY|g" IaC/dev.yaml && echo "registry url added"

          sed -i "s|<DOCKER_REGISTRY_USERNAME>|$REGISTRY_USERNAME|g" IaC/dev.yaml && echo "registry username added"

          sed -i "s|<DOCKER_REGISTRY_PASSWORD>|$REGISTRY_PASSWORD|g" IaC/dev.yaml && echo "registry password added"   

          sed -i "s|<NETWORK_PROFILE_ID>|$nw_profile_id|g" IaC/dev.yaml && echo "Network Profile ID added"     

          sed -i "s|<SQL_SERVER_FQDN>|$sql_server_fqdn|g" IaC/dev.yaml && echo "sql server fqdn added"

          sed -˜i "s|<SQL_SERVER_USERNAME>|${{ SECRETS.SQL_USER }}|g" IaC/dev.yaml && echo "sql username added"

          sed -i "s|<SQL_SERVER_PASSWORD>|${{ SECRETS.SQL_PASSWORD }}|g" IaC/dev.yaml && echo "sql server password added"

          sed -i "s|<GIT_SHA>|$GITHUB_SHA|g" IaC/dev.yaml && echo "github sha added"
      
      # - name: "Update Application Gateway"
      #   run: |
      #     allocation_method=Static
