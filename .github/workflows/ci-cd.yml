name: Azure Friday Demo

on:
  push:
    branches:
      - main
  workflow_dispatch:
    

# add in on main branch only

env:
  # basic  
  resourceGroup: azurefriday
  location: eastus
  subName: "ca-jessde-demo-test"

  # app specific
  acrName: azurefriday21

  # storage
  storage_account_name: acijdimgresfq3snhzfq

  # aci
  image_name: jd-image

jobs:
  deployInfra:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
    # checkout branch
    - name: git checkout main branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # create resourceGroup
    - name: "Create Resource Group"
      run: |
        az group create \
        --subscription "$subName" \
        --name $resourceGroup \
        --location $location > /dev/null && echo "Resource Group Created."

    # create azure container registry
    - name: "Create Azure Container Registries"
      id: create-acr
      run: |
        az acr create \
          --resource-group $resourceGroup \
          --name $acrName \
          --sku Premium \
          --subscription "$subName" \
          --admin-enabled true

        echo "Retrieving Container Registry info..."
        CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
        REGISTRY_USERNAME=$(az acr credential show -n $acrName --query username -o tsv)
        REGISTRY_PASSWORD=$(az acr credential show -n $acrName -o tsv --query passwords[0].value)

        echo "CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)" >> $GITHUB_ENV
        echo "REGISTRY_USERNAME=$(az acr credential show -n $acrName --query username -o tsv)" >> $GITHUB_ENV
        echo "REGISTRY_PASSWORD=$(az acr credential show -n $acrName -o tsv --query passwords[0].value)" >> $GITHUB_ENV

        echo "::add-mask::$REGISTRY_USERNAME"
        echo "::add-mask::$REGISTRY_PASSWORD"
    
    # Create storage account
    - name: "Create storage account"
      run: |
        az storage account create \
          -n $storage_account_name \
          -g $resourceGroup \
          --sku Premium_LRS \
          --kind FileStorage
        
        storage_account_key=$(az storage account keys list --account-name $storage_account_name -g $resourceGroup --query '[0].value' -o tsv)
        echo "storage_account_key=$(az storage account keys list --account-name $storage_account_name -g $resourceGroup --query '[0].value' -o tsv)" >> $GITHUB_ENV
        echo "::add-mask::$storage_account_key"

        az storage share create \
          --account-name $storage_account_name \
          --account-key $storage_account_key \
          --name images

        # make sub folder for originals

        az storage share create \
          --account-name $storage_account_name \
          --account-key $storage_account_key \
          --name pr-images

    - name: "Create Storage Key Secret"
      uses: jldeen/actions-set-secret@releases/v1
      with:
        name: storage_account_key
        value: ${{ env.storage_account_key }}
        owner: jldeen
        repository: azurefridayaci
        token: ${{ secrets.REPO_TOKEN }}

    - name: "Create Registry Secret"
      uses: jldeen/actions-set-secret@releases/v1
      with:
        name: CONTAINER_REGISTRY
        value: ${{ env.CONTAINER_REGISTRY }}
        owner: jldeen
        repository: azurefridayaci
        token: ${{ secrets.REPO_TOKEN }}   

    - name: "Create Registry User Secret"
      uses: jldeen/actions-set-secret@releases/v1
      with:
        name: REGISTRY_USERNAME
        value: ${{ env.REGISTRY_USERNAME }}
        owner: jldeen
        repository: azurefridayaci
        token: ${{ secrets.REPO_TOKEN }}

    - name: "Create Registry Password Secret"
      uses: jldeen/actions-set-secret@releases/v1
      with:
        name: REGISTRY_PASSWORD
        value: ${{ env.REGISTRY_PASSWORD }}
        owner: jldeen
        repository: azurefridayaci
        token: ${{ secrets.REPO_TOKEN }}         

  build:
    name: Build / Push to ACR
    runs-on: ubuntu-latest
    needs: deployInfra
    steps:
    # checkout branch
    - name: git checkout main branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: "docker login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: "build image resizer api"
      run: docker build ./imageresizer -t ${{ secrets.CONTAINER_REGISTRY }}/azurefriday/image-resizer:${{ github.sha }}
    
    - name: Scan Image Resizer API Container
      uses: jldeen/container-scan@releases/v1
      with:
        image-name: ${{ secrets.CONTAINER_REGISTRY }}/azurefriday/image-resizer:${{ github.sha }}
    
    - name: "push image resizer api"
      run: docker push ${{ secrets.CONTAINER_REGISTRY }}/azurefriday/image-resizer:${{ github.sha }}

  # deploy:
  #   name: Deploy to ACI
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     # checkout branch
  #     - name: git checkout main branch
  #       uses: actions/checkout@v2

  #     # log into Azure
  #     - name: "Login via Azure CLI"
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
      
  #     - name: 'Create Image Resizer in ACI'
  #       uses: 'azure/aci-deploy@v1'
  #       with:
  #         resource-group: ${{ env.resourceGroup }}
  #         name: ${{ env.image_name }}
  #         dns-name-label: ${{ env.image_name }}
  #         image: ${{ secrets.CONTAINER_REGISTRY }}/azurefriday/imageresizer:${{ github.sha }}
  #         registry-login-server: ${{ secrets.CONTAINER_REGISTRY }}
  #         registry-username: ${{ secrets.REGISTRY_USERNAME }}
  #         registry-password: ${{ secrets.REGISTRY_PASSWORD }}
  #         location: ${{ env.location }}
  #         ports: 80
  #         azure-file-volume-share-name: images
  #         azure-file-volume-account-name: ${{ env.storage_account_name }}
  #         azure-file-volume-account-key: ${{ secrets.storage_account_key }}
  #         azure-file-volume-mount-path: /app/images
