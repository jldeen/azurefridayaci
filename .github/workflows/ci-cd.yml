name: Azure Friday Full CI CD

on: [push]
  # pull_request:
  #   branches:
  #     - main

env:
  # basic  
  resourceGroup: azurefriday
  location: eastus
  subName: "ca-jessde-demo-test"

  # app specific
  acrName: azurefriday21
  aci_name: sslaci

  # vnet
  vnet_name: acivnet
  vnet_prefix: 192.168.0.0/16

  #sql
  sql_server_name: sqlserver-gfq3snhzfq
  sql_db_name: mydb

  # storage
  storage_account_name: acilabgfq3snhzfq

  # appgw
  appgw_name: appgw
  appgw_pip_name: ${appgw_name}-pip
  appgw_pip_dns: ${appgw_name}-gfq3snhzfq


  # aci
  aci_subnet_name: aci
  aci_subnet_prefix: 192.168.2.0/24
  sql_subnet_name: sql
  sql_subnet_prefix: 192.168.3.0/24

jobs:
  deployInfra:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
    # checkout branch
    - name: git checkout main branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # create resourceGroup
    - name: "Create Resource Group and Network vnet"
      run: |
        az group create \
        --subscription "$subName" \
        --name $resourceGroup \
        --location $location > /dev/null && echo "Resource Group Created."

        vnetCheck=$(az network vnet list -g $resourceGroup -o tsv --query [0].name)

        if [[  $vnetCheck  ]]; then
          echo 'Virtual Network already exists'
        else
          echo 'Virtual network does not exist. Creating virtual network now.'
          # create vnet
          az network vnet create \
            -n $vnet_name \
            -g $resourceGroup \
            --address-prefix $vnet_prefix > /dev/null && echo "vnet created."

          az network vnet subnet create \
            --vnet-name $vnet_name \
            -g $resourceGroup \
            -n $appgw_subnet_name \
            --address-prefix $appgw_subnet_prefix > /dev/null && echo "vnet subnet created for appgw."

          az network vnet subnet create \
            --vnet-name $vnet_name \
            -g $resourceGroup \
            -n $aci_subnet_name \
            --address-prefix $aci_subnet_prefix > /dev/null && echo "vnet subnet created for aci."

          az network vnet subnet create \
            --vnet-name $vnet_name \
            -g $resourceGroup \
            -n $sql_subnet_name \
            --address-prefix $sql_subnet_prefix > /dev/null && echo "vnet subnet created for sql."
        fi

    # create azure container registry
    - name: "Create Azure Container Registry"
      run: |
        az acr create \
          --resource-group $resourceGroup \
          --name $acrName \
          --sku Premium \
          --subscription "$subName" \
          --admin-enabled true
    
    # create database
    - name: "Create SQL Database"
      run: |
        az sql server create \
          -n $sql_server_name \
          -g $resourceGroup \
          -l $location \
          --admin-user ${{ SECRETS.SQL_USER }} --admin-password ${{ SECRETS.SQL_PASSWORD}}

        echo "sql_server_fqdn=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query fullyQualifiedDomainName)" >> $GITHUB_ENV
        
        az sql db create \
          -n $sql_db_name \
          -s $sql_server_name \
          -g $resourceGroup \
          -e Basic -c 5 --no-wait
    
    # create SQL server private endpoint
    - name: "Create SQL Server private endpoint"
      run: |
        sql_endpoint_name=sqlep

        sql_server_id=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query id)
        echo "sql_server_id=$(az sql server show -n $sql_server_name -g $resourceGroup -o tsv --query id)" >> $GITHUB_ENV
        
        az network vnet subnet update \
          -n $sql_subnet_name \
          -g $resourceGroup \
          --vnet-name $vnet_name \
          --disable-private-endpoint-network-policies true
        
        az network private-endpoint create \
          -n $sql_endpoint_name \
          -g $resourceGroup \
          --vnet-name $vnet_name \
          --subnet $sql_subnet_name \
          --private-connection-resource-id $sql_server_id \
          --group-id sqlServer \
          --connection-name sqlConnection
        
        sql_nic_id=$(az network private-endpoint show -n $sql_endpoint_name -g $resourceGroup --query 'networkInterfaces[0].id' -o tsv)

        echo "sql_endpoint_name=sqlep" >> $GITHUB_ENV
        echo "sql_nic_id=$(az network private-endpoint show -n $sql_endpoint_name -g $resourceGroup --query 'networkInterfaces[0].id' -o tsv)" >> $GITHUB_ENV
        echo "sql_endpoint_ip=$(az network nic show --ids $sql_nic_id --query 'ipConfigurations[0].privateIpAddress' -o tsv)" >> $GITHUB_ENV
  

    - name: "Create Azure Private DNS Zones for private link"
      run: |
        plink_dns_zone_name=jessicadeen.database.windows.net

        plink_dns_check=$(az network private-dns zone list -g $resourceGroup -o tsv --query '[0].name')

        echo "Your sql endpoint IP is: $sql_endpoint_ip"

        if [[  $plink_dns_check  ]]; then
          echo "Azure DNS Zone for Private Link Already Exists."
        else
          az network private-dns zone create \
          -n $plink_dns_zone_name \
          -g $resourceGroup 

          az network private-dns link vnet create \
            -g $resourceGroup \
            -z $plink_dns_zone_name \
            -n privatelink \
            --virtual-network $vnet_name \
            --registration-enabled false

          az network private-dns record-set a create \
            -n $sql_server_name \
            -z $plink_dns_zone_name \
            -g $resourceGroup

          az network private-dns record-set a add-record \
            --record-set-name $sql_server_name \
            -z $plink_dns_zone_name \
            -g $resourceGroup \
            -a $sql_endpoint_ip

          dns_zone_name=jessicadeen.com

          az network private-dns zone create \
            -n $dns_zone_name \
            -g $resourceGroup 

          az network private-dns link vnet create \
            -g $resourceGroup \
            -z $dns_zone_name \
            -n jessicadeen \
            --virtual-network $vnet_name \
            --registration-enabled false
        fi
      
      # Create storage account
    - name: "Create storage account"
      run: |
        az storage account create \
          -n $storage_account_name \
          -g $resourceGroup \
          --sku Premium_LRS \
          --kind FileStorage

        storage_account_key=$(az storage account keys list --account-name $storage_account_name -g $resourceGroup --query '[0].value' -o tsv)

        az storage share create \
          --account-name $storage_account_name \
          --account-key $storage_account_key \
          --name initscript
        
        echo "vnet_id=$(az network vnet show -n $vnet_name -g $resourceGroup --query id -o tsv)" >> $GITHUB_ENV 
        echo "subnet_id=$(az network vnet subnet show -n $aci_subnet_name --vnet-name $vnet_name -g $resourceGroup --query id -o tsv)" >> $GITHUB_ENV

    - name: "Create Network Profile"
      run: |
        az container create \
          -n dummy \
          -g $resourceGroup \
          --image alpine:latest \
          --ip-address private \
          --ports 80 \
          --vnet $vnet_id \
          --subnet $subnet_id

        # If the previous command fails with an error, it is no problem, as long as a network profile is created (see below)

        az container delete \
          -n dummy \
          -g $resourceGroup -y

        nw_profile_id=$(az network profile list -g $resourceGroup --query '[0].id' -o tsv)
        echo "nw_profile_id=$(az network profile list -g $resourceGroup --query '[0].id' -o tsv)" >> $GITHUB_ENV

        if [[ -z "$nw_profile_id" ]]
        then
            echo "No network profile could be created!!"
        fi

  build:
    runs-on: ubuntu-latest
    needs: deployInfra
    steps:
    # checkout branch
    - name: git checkout main branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: "Get ACR Container Information"
      run: |
        echo "Retrieving Container Registry info..."
        acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
        CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
        # acr/container registry variables
        echo "CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)" >> $GITHUB_ENV
        echo "REGISTRY_USERNAME=$(az acr credential show -n $acrName --query username -o tsv)" >> $GITHUB_ENV
        echo "REGISTRY_PASSWORD=$(az acr credential show -n $acrName -o tsv --query passwords[0].value)" >> $GITHUB_ENV
    
    - name: "docker login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: "build web container"
      run: docker build ./web -t $CONTAINER_REGISTRY/azurefriday/web:$GITHUB_SHA

    - name: "build api container"
      run: docker build ./api -t $CONTAINER_REGISTRY/azurefriday/api:$GITHUB_SHA

    - name: "build dash container"
      run: docker build ./dash -t $CONTAINER_REGISTRY/azurefriday/dash:$GITHUB_SHA

    # - name: Scan Web Container
    #   uses: azure/container-scan@v0
    #   with:
    #     image-name: $CONTAINER_REGISTRY/azurefriday/web:$GITHUB_SHA
    
    # - name: Scan API Container
    #   uses: azure/container-scan@v0
    #   with:
    #     image-name: $CONTAINER_REGISTRY/azurefriday/api:$GITHUB_SHA
    
    # - name: Scan Dashboard Container
    #   uses: azure/container-scan@v0
    #   with:
    #     image-name: $CONTAINER_REGISTRY/azurefriday/dash:$GITHUB_SHA
    
    - name: "push web"
      run: docker push $CONTAINER_REGISTRY/azurefriday/web:$GITHUB_SHA

    - name: "push api"
      run: docker push $CONTAINER_REGISTRY/azurefriday/api:$GITHUB_SHA

    - name: "push dashboard"
      run: docker push $CONTAINER_REGISTRY/azurefriday/dash:$GITHUB_SHA

  # # Possibly setup release in ADO with gates and approvals
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: "Get ACR and App Insights Information"
  #       run: |
  #         echo "Retrieving Container Registry info..."
  #         acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
  #         CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
  #         # acr/container registry variables
  #         echo "::set-env name=CONTAINER_REGISTRY::$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)"
  #         echo "::set-env name=REGISTRY_USERNAME::$(az acr credential show -n $acrName --query username -o tsv)"
  #         echo "::set-env name=REGISTRY_PASSWORD::$(az acr credential show -n $acrName -o tsv --query passwords[0].value)"

  #         echo "Retrieving Application Insights info..."
  #         instrumentationKey=$(az monitor app-insights component show --app $webappName --resource-group $resourceGroup --query instrumentationKey -o tsv)

  #     - name: "Deploy to Azure Container Instances"
  #       uses: "azure/aci-deploy@v1"
  #       with:
  #         resource-group: $resourceGroup
  #         dns-name-label: $aci_dns
  #         image: $CONTAINER_REGISTRY/sqlapi
  #         registry-username: ${{ env.REGISTRY_USERNAME }}
  #         registry-password: ${{ env.REGISTRY_PASSWORD }}
  #         name: $aci_name
  #         location: $location

  # - name: "Create Application Gateway"
  #     run: |
  #       allocation_method=Static

  #       az network public-ip create -g $rg -n $appgw_pip_name --sku Standard --allocation-method $allocation_method --dns-name $appgw_pip_dns

  #       appgw_fqdn=$(az network public-ip show -g $rg -n $appgw_pip_name --query dnsSettings.fqdn -o tsv)

  #       az network application-gateway create -g $rg -n $appgw_name --min-capacity 1 --max-capacity 2 --sku Standard_v2 \
  #           --frontend-port 8050 --routing-rule-type basic \
  #           --http-settings-port 8050 --http-settings-protocol Http \
  #           --public-ip-address $appgw_pip_name --vnet-name $vnet_name --subnet $appgw_subnet_name \
  #           --servers "$dash_ip"

      # - name: "Deploy SQL ACI"
      #   run: |
      #     az container create -g $resourceGroup -f iac/dev.yaml
